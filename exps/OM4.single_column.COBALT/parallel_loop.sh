#!/bin/bash
#
# THIS SCRIPT ALLOWS PARALLEL 
# LOOP THE 1D COLUNM RUN OF THE ONLINE 
# COBALT-FEISTY OVER A GIVEN NUMBER OF ITERATIONS <NUM_ITERATIONS>
# 
# CONTACT: JARED BRZENSKI <JABRZENSKI@UCSD.EDU>
#
# usage: ./parallel_loop  <NumParallelLoops> <UniqueName> <numberofiterations (years)> <reference_number>
# 
# The reference number is what Fmort will start at, and will be incremented by 0.01 each Paralleloop
# RUN THIS SCRIPT FROM THE CEFI/EXPS/OM4 DIRECTORY
#
# REQUIRES ENVIRONMENT VARIABLES:
#
# CEFI_DATASET_LOC     -> the location of the dataset, which link_databse needs
# CEFI_EXECUTABLE_LOC  -> the location of MOM6SIS2 you want to run
# SCRATCH_DIR          -> location you want to work from, must exist!!!
# SAVE_DIR             -> location of the final saved files. 
#
# YOU CAN ALSO SET THEM HERE, UNCOMMENT THE FOUR FOLLOWING LINES AND SET:
# export CEFI_DATASET_LOC=
# export CEFI_EXECUTABLE_LOC=
# export SCRATCH_DIR= 
# export SAVE_DIR=
#
########################################################################################
isnum_Case() { case ${1#[-+]} in ''|.|*[!0-9.]*|*.*.*) return 1;; esac ;}

# CHECK IF THE CORRECT NUMBER OF ARGUMENTS ARE PROVIDED
if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <numofloops> <Unique Name> <number of iterations (years)> < reference number >"
    exit 1
fi

# CHECK TO SEE IF OTHER ENVIRONMENTAL VARIABLES ARE SET
if [ -z "${CEFI_DATASET_LOC}" ]; then
    echo "CEFI_DATASET_LOC is not set, exiting"
    exit 1
elif [ -z "${CEFI_EXECUTABLE_LOC}" ]; then
    echo "CEFI_EXECUTABLE_LOC not set, exiting"
    exit 1
elif [ -z "${SCRATCH_DIR}" ]; then
    echo "SCRATCH_DIR not set, exiting."
    exit 1
elif [ -z "${SAVE_DIR}" ]; then
    echo "SAVE_DIR not set, exiting"
    exit 1
else
    echo "Found all environmental variables, continuing..."
fi

# ASSIGN ARGUMENTS TO VARIABLES
NUM_LOOPS="$1"
UNIQUE_NAME="$2"
NUM_ITERATIONS="$3"
EXP_REF="$4"

###############################################################################
# CHECK TO MAKE SURE NUM LOOPS IS A NUMBER, >= 1
if [[ "$NUM_LOOPS" =~ ^[0-9]+$ ]] && (( NUM_LOOPS >= 1 )); then
    echo "Running run_multiyear $NUM_LOOPS times..."
else
    echo "$NUM_LOOPS is not a valid number or is less than 1, quitting..."
    exit 1
fi

###############################################################################
# Check if the argument is a number between 0 and 1 (inclusive)
if [[ "$EXP_REF" =~ ^0(\.[0-9]+)?$|^1(\.0+)?$ ]]; then
    echo "Fmort value $EXP_REF is between 0 and 1 (inclusive)"
else
    echo "FMort value $EXP_REF is not between 0 and 1 (inclusive), exiting..."
    exit 1
fi

###############################################################################
# SETUP nonFmort VARIABLE TO UNIQUE VALUE EACH LOOP
# CURRENTLY IT WILL STEP BY VALUES OF 0.01
for i in $(seq 1 $NUM_LOOPS); do
    #./test.sh "$i" &
    #echo "${EXP_REF}.$i"
    NONFMORT=$(bc -l <<< "scale=2; $EXP_REF+(${i}-1)/100")
    echo "The value generated by loop ${i} is ${NONFMORT}"

    CPU_CORE=$((i+10))
    echo "This will run on CPU_CORE ${CPU_CORE}"

    # ACTUAL COMMAND TO RUN THE MULTIYEAR BASH SCRIPT.
    # & SYBMOL AT THE END MEANS IT WILL NOT WAIT FOR THE PROGRAM TO FINISH BEFORE 
    # CONTINUING THROUGH THIS LOOP
    ./run_multiyear.sh "${UNIQUE_NAME}" "${NUM_ITERATIONS}" "${NONFMORT}" "${CPU_CORE}"&
    
done

# WAIT FOR ALL OF THE COMMANDS TO COMPLETE, THIS OVERRULES THE & SYMBOL
wait

echo "All ${NUM_LOOPS} simulations finished!"

